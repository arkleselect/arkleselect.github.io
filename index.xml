<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wpprqi</title>
    <link>https://arkleselect.github.io/</link>
    <description>Recent content on Wpprqi</description>
    <generator>Hugo</generator>
    <language>zh-us</language>
    <lastBuildDate>Tue, 22 Jul 2025 14:40:22 +0800</lastBuildDate>
    <atom:link href="https://arkleselect.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://arkleselect.github.io/daily/722/</link>
      <pubDate>Tue, 22 Jul 2025 14:40:22 +0800</pubDate>
      <guid>https://arkleselect.github.io/daily/722/</guid>
      <description>不想玩马可波罗了，这次是真的不想玩了</description>
    </item>
    <item>
      <title></title>
      <link>https://arkleselect.github.io/daily/test/</link>
      <pubDate>Mon, 21 Jul 2025 23:10:22 +0800</pubDate>
      <guid>https://arkleselect.github.io/daily/test/</guid>
      <description>钢琴好难练啊。。。</description>
    </item>
    <item>
      <title>AI数字人SadTalker</title>
      <link>https://arkleselect.github.io/posts/ai%E6%95%B0%E5%AD%97%E4%BA%BAsadtalker/</link>
      <pubDate>Mon, 21 Jul 2025 13:47:53 +0800</pubDate>
      <guid>https://arkleselect.github.io/posts/ai%E6%95%B0%E5%AD%97%E4%BA%BAsadtalker/</guid>
      <description>第一步：环境准备 1.1 安装 Anaconda 如果你还没装，可以从官网安装：https://www.anaconda.com/&#xA;1.2 创建虚拟环境 conda create -n sadtalker python=3.10 -y conda activate sadtalker 第二步：安装 Edge-TTS 2.1 安装 edge-tts pip install edge-tts 2.2 文本合成为语音 WAV edge-tts --text &amp;#34;你好，欢迎来到数字人世界！&amp;#34; --voice zh-CN-XiaoxiaoNeural &amp;gt; output.wav 💡 常见语音名称：&#xA;中文女声：zh-CN-XiaoxiaoNeural 中文男声：zh-CN-YunxiNeural 英文女声：en-US-JennyNeural 英文男声：en-US-GuyNeural 第三步：安装PyTorch 3.1 查看电脑配置 C:\Users\wa1yb&amp;gt;nvidia-smi Wed Jul 16 13:50:51 2025 +-----------------------------------------------------------------------------------------+ | NVIDIA-SMI 576.80 Driver Version: 576.80 CUDA Version: 12.9 | |-----------------------------------------+------------------------+----------------------+ | GPU Name Driver-Model | Bus-Id Disp.A | Volatile Uncorr.</description>
    </item>
    <item>
      <title>GPT-SoVITS声音克隆</title>
      <link>https://arkleselect.github.io/posts/gpt-sovits%E5%A3%B0%E9%9F%B3%E5%85%8B%E9%9A%86/</link>
      <pubDate>Sun, 20 Jul 2025 16:00:00 +0800</pubDate>
      <guid>https://arkleselect.github.io/posts/gpt-sovits%E5%A3%B0%E9%9F%B3%E5%85%8B%E9%9A%86/</guid>
      <description>GPT-SoVITS声音克隆 视频教程&#xA;你的声音，现在是我的了！- 手把手教你用 GPT-SoVITS 克隆声音！_哔哩哔哩_bilibili&#xA;第一步：环境部署 选择环境&#xA;Python 3.10 PyTorch 2.5.1 CUDA 12.4 1.1 创建并进入虚拟环境 conda create -n GPT python=3.10。18 conda activate GPT 1.2 使用阿里源下载 pip install torch==2.1.0+cu118 torchvision==0.16.0+cu118 torchaudio==2.1.0 --index-url https://download.pytorch.org/whl/cu118 1.3 安装依赖 pip install -r requirements.txt 1.4 运行脚本 python webui.py 1.5 下载整合包 可以运行后去官方下载整合包&#xA;https://github.com/RVC-Boss/GPT-SoVITS/blob/main/docs/cn/README.md&#xA;选择第一个，第二个是英伟达50系显卡&#xA;下载完后也是在项目根目录运行代码&#xA;python webui.py 第二步：整合音频 2.1 人声分离 点击开启人声分离UI，等待打开另一个页面&#xA;在打开的新网页中选择模型，然后输入音频路径(文件夹)&#xA;右下角输出Success 后关闭这个webUI&#xA;分离后的音频默认在这个文件夹&#xA;2.2 音频切割 使用切割工具输入刚才分离好的音频路径和设置输出路径，然后点击开启语音切分&#xA;2.3 生成list文件 设置切割好的音频所在文件夹和输出路径后开始切分&#xA;2.3 打标 切分好后设置list路径后点击按钮&#xA;之后会打开另一个页面，在新页面中 右边听录音，按照句子停顿 在左边文本框修改停顿点</description>
    </item>
    <item>
      <title>为Hugo博客添加评论系统 | utterances</title>
      <link>https://arkleselect.github.io/posts/20240903/</link>
      <pubDate>Tue, 03 Sep 2024 20:10:04 +0800</pubDate>
      <guid>https://arkleselect.github.io/posts/20240903/</guid>
      <description>参考官方文档:utterances&#xA;1. 创建一个存储评论系统的仓库 先创建一个仓库，一定要是公开的，比如我的是comments&#xA;2. 授权评论系统 点击链接，选择你刚才创建的仓库。&#xA;3. 在hugo主题中新建一个模块comments 路径：themes/mytheme/layouts/partials/comments.html，粘贴代码&#xA;&amp;lt;div&amp;gt; &amp;lt;div class=&amp;#34;pagination__title&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;pagination__title-h&amp;#34; style=&amp;#34;font-size: 20px;&amp;#34;&amp;gt;评论&amp;lt;/span&amp;gt; &amp;lt;br/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;tcomment&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;https://utteranc.es/client.js&amp;#34; repo=&amp;#34;你的github用户名/你创建的仓库名&amp;#34; issue-term=&amp;#34;title&amp;#34; theme=&amp;#34;github-light&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34; async&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;/div&amp;gt; 修改repo=&amp;ldquo;你的github用户名/你创建的仓库名&amp;rdquo; ，例如我的repo=&amp;ldquo;arkleselect/comments&amp;rdquo; 然后在你的hugo中控制文章页面的代码中引用comments 我的是在single.html&#xA;{{ partial &amp;#34;comments.html&amp;#34; . }} 4. 修改配置文件 在hugo的根目录配置文件中添加参数 💡注意不是主题文件夹的配置文件 如果配置文件是yaml结尾的文件（config.yaml）则粘贴如下代码&#xA;utteranc: enable: true repo: &amp;#34;你的GitHub用户名/你创建的仓库名&amp;#34; issueTerm: &amp;#34;title&amp;#34; theme: &amp;#34;github-light&amp;#34; 修改repo: &amp;ldquo;你的GitHub用户名/你创建的仓库名&amp;rdquo; ，例如我的repo=&amp;ldquo;arkleselect/comments&amp;rdquo; 如果你是toml结尾的文件（hugo.toml），选择这个&#xA;[params.utterances] enable = true repo: &amp;#34;你的GitHub用户名/你创建的仓库名&amp;#34; issueTerm = &amp;#34;title&amp;#34; theme = &amp;#34;github-light&amp;#34; 参考 https://www.</description>
    </item>
  </channel>
</rss>
